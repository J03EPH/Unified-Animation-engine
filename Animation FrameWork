import pygame
import numpy as np
import sys

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Basic 3D Animation Engine")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Define a basic 3D cube
vertices = np.array([
    [-1, -1, -1],
    [1, -1, -1],
    [1, 1, -1],
    [-1, 1, -1],
    [-1, -1, 1],
    [1, -1, 1],
    [1, 1, 1],
    [-1, 1, 1]
])

edges = [
    (0, 1), (1, 2), (2, 3), (3, 0),
    (4, 5), (5, 6), (6, 7), (7, 4),
    (0, 4), (1, 5), (2, 6), (3, 7)
]

# Simple rotation matrices
def rotation_matrix_x(theta):
    return np.array([
        [1, 0, 0],
        [0, np.cos(theta), -np.sin(theta)],
        [0, np.sin(theta), np.cos(theta)]
    ])

def rotation_matrix_y(theta):
    return np.array([
        [np.cos(theta), 0, np.sin(theta)],
        [0, 1, 0],
        [-np.sin(theta), 0, np.cos(theta)]
    ])

def rotation_matrix_z(theta):
    return np.array([
        [np.cos(theta), -np.sin(theta), 0],
        [np.sin(theta), np.cos(theta), 0],
        [0, 0, 1]
    ])

# Simple projection function
def project(vertex):
    scale = 400
    offset_x = WIDTH // 2
    offset_y = HEIGHT // 2
    x = vertex[0] * scale / (vertex[2] + 4) + offset_x
    y = -vertex[1] * scale / (vertex[2] + 4) + offset_y
    return int(x), int(y)

# Main loop
clock = pygame.time.Clock()
angle_x, angle_y, angle_z = 0, 0, 0

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
    
    screen.fill(BLACK)
    
    # Apply rotation
    Rx = rotation_matrix_x(angle_x)
    Ry = rotation_matrix_y(angle_y)
    Rz = rotation_matrix_z(angle_z)
    rotation_matrix = Rz @ Ry @ Rx
    
    rotated_vertices = np.dot(vertices, rotation_matrix.T)
    
    # Project vertices
    projected_vertices = [project(vertex) for vertex in rotated_vertices]
    
    # Draw edges
    for edge in edges:
        start, end = edge
        pygame.draw.line(screen, WHITE, projected_vertices[start], projected_vertices[end], 1)
    
    pygame.display.flip()
    angle_x += 0.01
    angle_y += 0.02
    angle_z += 0.03
    clock.tick(30)  # Limit to 30 FPS for performance

